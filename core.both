/*
 * This C/C++ file is the backend header. It is parsed by a 
 * C++ compiler when compiling core.cpp, but it is also parsed 
 * by a C compiler when compiling user's C code. As such, the
 * referred 'qcomp' type is assumed to be the compiler's native
 * complex type.
 */

#ifndef CORE_HPP
#define CORE_HPP


// types.hpp is also a C/C++ agnostic file, so we can import it directly
#include "types.both"


// when this file is being parsed by C++, we disable its name mangling, so
// that a user's C code can later find these symbols. We can only directly
// expose the C++ functions which do not pass/return qcomp by-value.
#ifdef __cplusplus
extern "C" {
#endif

    // both C and C++ agree on 'int' just fine; no issues
    int myIntFunc(int a);

    // both can handle pointers to qcomp fine
    double myCompArrFunc(qcomp* arr, int len);

// end de-mangler
#ifdef __cplusplus
}
#endif


// when this file is being parsed by C++, for the backend or for a
// C++ user's code, we directly resolve the C++-only function, which
// are functions which receive/return qcomp by-value
#ifdef __cplusplus
    qcomp myCompFunc(qcomp a);
    double myDoubleFunc(qcomp a);

// but when parsed by user's C code, we have to instead use the
// alternative C++ function which safely passes the complex type
// by pointer, not by return value. We define myCompFunc here 
// (which to C, is so far completely unknown due to C++ name mangling),
// and wrap the safe C++ function, ultimately achieving the same C++ interface
#else

    void myCompFunc_alt(qcomp* out, qcomp *in);
    qcomp myCompFunc(qcomp a) {
        qcomp out;
        myCompFunc_alt(&out, &a);
        return out;
    }

    double myDoubleFunc_alt(qcomp* a);
    double myDoubleFunc(qcomp a) {
        return myDoubleFunc_alt(&a);
    }

#endif


#endif // CORE_HPP
