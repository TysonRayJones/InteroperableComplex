name: Windows

on:
  push:

env:
  # MSVC doesn't support C99, but C++14 has similar conformance
  C_FLAGS: -Isrc -std:c++14

  # MSVC requires : syntax
  CPP_FLAGS: -Isrc -std:c++14

  # NVCC requires = syntax (yes, really!)
  CUDA_FLAGS: -Isrc -std=c++14 -arch=sm_61

jobs:

  cpp_cpu:
    name: C++ (CPU)
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1

      - name: compile backend
        run: |
          cl -c src/core.cpp ${{ env.CPP_FLAGS }}
          cl -c src/alts.cpp ${{ env.CPP_FLAGS }}

      - name: compile and link main
        run: |
          cl main.cpp core.obj alts.obj ${{ env.CPP_FLAGS }}

      - name: run main
        run: |
          ./main.exe

  cpp_gpu:
    name: C++ (GPU)
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: Jimver/cuda-toolkit@v0.2.14
        id: cuda-toolkit
        with:
          sub-packages: '["nvcc", "visual_studio_integration"]'
          method: 'network'

      - name: checking CUDA installation
        run: |
          ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin"
          ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\include"

      - name: saving CUDA vars
        id: cuda-vars
        run: |
          echo '\
            -I"${{ steps.cuda-toolkit.outputs.CUDA_PATH }}" \
            -I"${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin" \
            -I"${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\include" \
            ' >> $GITHUB_OUTPUT

      - name: checking CUDA vars
        run: |
          echo "${{ steps.cuda-vars.outputs.* }}"

      - name: checking CUDA vars in another format
        run: |
          echo "${{join(steps.run_tests.outputs.*, ' ')}}"

      - name: compile backend
        run: |
          nvcc -c src/core.cu ${{ env.CUDA_FLAGS }} ${{ steps.cuda-vars.outputs.* }}
          cl -c src/alts.cpp ${{ env.CPP_FLAGS }}

      - name: compile main
        run: |
          cl -c main.cpp ${{ env.CPP_FLAGS }}

      - name: link
        run: |
          nvcc -o main.exe main.obj core.obj alts.obj ${{ env.CUDA_FLAGS }} ${{ steps.cuda-vars.outputs.* }}

  c_cpu:
    name: C (CPU)
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1

      - name: compile backend
        run: |
          cl -c src/core.cpp ${{ env.CPP_FLAGS }}
          cl -c src/alts.cpp ${{ env.CPP_FLAGS }}

      - name: compile and link main
        run: |
          cl main.c core.obj alts.obj ${{ env.C_FLAGS }}

      - name: arg test
        run : |
          echo '${{ env.CPP_FLAGS }}'

      - name: run main
        run: |
          ./main.exe

  c_gpu:
    name: C (GPU)
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: Jimver/cuda-toolkit@v0.2.14
        with: 
          sub-packages: '["nvcc", "visual_studio_integration"]'
          method: 'network'

      - name: compile backend
        run: |
          nvcc -c src/core.cu ${{ env.CUDA_FLAGS }} ${{ steps.cuda-vars.outputs.* }}
          cl -c src/alts.cpp ${{ env.CPP_FLAGS }}

      - name: compile main
        run: |
          cl -c main.c ${{ env.CPP_FLAGS }}

      - name: link
        run: |
          nvcc -o main.exe main.obj core.obj alts.obj ${{ env.CUDA_FLAGS }}
